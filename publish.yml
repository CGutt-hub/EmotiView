name: Publish Public Files

on:
  push:
    branches:
      - dev

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # We need to fetch all history to be able to checkout other branches
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }} # Use a PAT for permissions

      - name: Verify Token Permissions
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "--- Verifying GitHub CLI authentication ---"
          gh auth status
          echo "--- Verifying git remote access ---"
          git ls-remote

      - name: Update main branch
        run: |
          # Use the standard Actions bot for the commit for better security and standards
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "--- Switching to main branch ---"
          git checkout main

          echo "--- Cleaning main branch ---"
          # Stage all files for removal to ensure a clean slate.
          git rm -rf .

          echo "--- Restoring README.md ---"
          # Re-introduce the README.md from the dev branch to preserve it.
          git checkout dev -- README.md

          # --- ACTION REQUIRED ---
          # Define the specific files you want to publish to the main branch.
          # Add or remove files from this list as needed.
          # Paths are relative to the repository root.
          FILES_TO_COPY=(
            "dev/EV_proposal/EV_proposal.tex"
            "dev/EV_results"
            "dev/EV_analysis"
          )

          echo "--- Copying selected files to main branch root ---"
          for file_path in "${FILES_TO_COPY[@]}"; do
            if [ -f "$file_path" ]; then
              echo "Copying '$file_path'..."
              cp "$file_path" .
            else
              echo "Warning: File '$file_path' not found in dev branch. Skipping."
            fi
          done

          echo "--- Final file structure in main branch: ---"
          ls -la

          git add .

          # Only commit and push if there are actual changes
          if git diff --staged --quiet; then
            echo "No changes to deploy. Main branch is already up-to-date."
            exit 0
          fi

          git commit -m "Deploy: Sync selected files to main"

          echo "--- Force pushing to main ---"
          # Force push to overwrite the main branch completely. This is necessary
          # to avoid conflicts with the old history.
          git push --force origin main
