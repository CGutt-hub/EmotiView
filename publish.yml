name: Publish Public Files

on:
  push:
    branches:
      - dev

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # We need to fetch all history to be able to checkout other branches
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }} # Use a PAT for permissions

      - name: Verify Token Permissions
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "--- Verifying GitHub CLI authentication ---"
          gh auth status
          echo "--- Verifying git remote access ---"
          git ls-remote

      - name: Update main branch
        run: |
          # Use the standard Actions bot for the commit for better security and standards
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "--- Switching to main branch ---"
          git checkout main

          echo "--- Cleaning main branch ---"
          # Remove all old files from the main branch.
          # The `|| true` prevents the script from failing if the directory is already empty.
          git rm -rf . || true

          # --- ACTION REQUIRED ---
          # Define the specific files and directories you want to publish to the main branch.
          # These will be pulled directly from the 'dev' branch.
          FILES_TO_PUBLISH=(
            "README.md" # Keep the README
            "EV_proposal/EV_proposal.tex"
            "EV_results"
            "EV_analysis"
          )

          echo "--- Checking out selected files from dev branch ---"
          # Use git to checkout the specific files/dirs from the dev branch into our main branch workspace
          git checkout dev -- "${FILES_TO_PUBLISH[@]}"

          echo "--- Final file structure in main branch: ---"
          # Use -R to show contents of directories as well
          ls -laR

          git add .

          # Only commit and push if there are actual changes
          if git diff --staged --quiet; then
            echo "No changes to deploy. Main branch is already up-to-date."
            # Exit successfully
            exit 0
          fi

          git commit -m "Deploy: Sync selected files to main"

          echo "--- Force pushing to main ---"
          # Force push to overwrite the main branch completely. This is necessary
          # to avoid conflicts with the old history.
          git push --force origin main
